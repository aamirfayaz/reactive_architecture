Reactive Architecture Part-2
Domian Driven Design
-> Architectural approach used to design large systems.It gives a set of guidelines to break larger domains into smaller domains.
-> Many of the guidelines and rules in Domain Driven Design are compatible with those in Reactive Architecture.
-> In the context of software, Domain refers to business or idea that we are modelling.
-> key goal of DDD is to build a model that the domain experts understand.
-> Model is not the software,it represents our understanding of the domain, software is implementation of the model.
-> We use Ubiquitous langauge as a communication channel between s/w developers and domain experts.
-> Terminology in UL comes from domain experts, words originate in domain and are used in s/w, avoid using s/w terms and introducing them in domain.

==Bounded Context==
-> e.g Restaurant Domain (Orders, Servers, Credit, Reservation, Plate, Cook etc), contains ideas, actions, rules that interact in complex way.
-> We create sub-domain from large domain (e.g Reservation sub-domain contains[reservation, customer, table, time, location etc])
-> Sub-domains are created by grouping related ideas, actions and rules. Some concepts may exist in multiple sub-domains (e.g customer)
-> Each sub-domain has its own ubiquitous language and model, the language and model for a sub-domain is called Bounded-Context.
-> Examples of BC: [orders, reservations, payments, menu, customers]
-> Concepts/terms can be shared to multiple Sub-domains or BC.
-> Sub-domains or Bounded Contexts are good starting points for building reactive microservices.
-> From one BC to the next, the meaning of a word (e.g order) may change greatly.
-> In RBQQ, while talking to a server, order has a very specific meaning, but for someone managing inventory for RBBQ, order means something different.
-> Also need to observe how details of a model changes when moving from one BC to another.
-> In RBBQ, for kitchen preparing an order, they don't care about prices, but when customer pays for order, price is critical.
-> It is the same order but the relevant details of the Order changes while moving from one BC to another.
-> Ways to determine Bounded Context, no universal answer, but there are some guidelines, which signal a division:
   --> Consider human culture and interactions.
   --> Look for changes in Ubiquitous languages.(if the use or meaning of langugae changes, it suggests a new BC)
   --> Look for varying or unnecessary information in a context (e.g employee id meaningless in a customer so movie to say Employee sub-domain).
   --> Strongly separated bounded-context will result in smooth workflows (an awkward workflow signals misunderstanding of the domain), also, if
	bounded context has too many dependencies, it may be over-complicated.	

== Event First DDD===
-> Traditionally, DDD, focused on the objects in the domain e.g, Cook, Reservation, Customer etc (Eric Evens book)
-> Event First DDD, places the focus on activities or events that occur in a domain e.g: Customer makes a reservation, server places an order, 
   food served to customer etc.
-> Using EFDDD, we start by defining the activities, then group those activities to find logical system boundaries. (There is a particular techinque
   called Event Storming for it.)
   
==Subject-Verb-Object notation==
->Subject-Verb-Object notation to give a consistent way to phrase our activities or our events in domain.
-> e.g Host checks current reservation, Host(Subject), checks (verb), reservation (object): So, subject is the person who is doing the action performed,
       verb will be what action it does.
-> e.g a Host Interviewer Subject-Verb-Object[Host answers phones, Host records reservations, Host greets guests, Host seats guests,
					      Host checks Reservations, Host record tables as occupied]

-> So, once we have separated our BCs into these nice clean boundaries. Now we have to maintain the purity of those BCs. Using Anti-Corruption Layers
-> [Reservation Context]--Anti-Corruption-Layer--[Customer context] (ACL, implemented as interfaces, and others (e.g customer) as concrete classes)
   -> Each BC may have domain concepts that are unique. (e.g address to customer, address doesn't matter in reservation)
   -> Concepts are not always compatible from one context to another(e.g customer address invalid in reservations), 
	ACL are introuduced to translate these concepts (e.g customer address not needed in reservation, so removed/translated from 1 context to another)
-> ACL, will prevent BCs to leak into each other, also, helps BCs to stand alone (ACL, uses caching if some feature from BC disappears for some reason)
-> ACL, can be implemented in Legacy system or in BC or both.

-> Context Maps are ways of visualizing BCs and the relationships between them.

->Bartender collects Payment for a Drink Order, In this sentence our object could be Payment or it could be Drink Order.
  Both are actually objects in the sentence. Payment is what is known as a "direct object" and Drink Order is an "indirect object".
   
   ===Domain Activities===
-> Commands (should be intent revealing, specific) are type of activity that occurs in domain, It represents a request to perform an action.
	It is usually delivered to a specific destination, It causes a change to the state of a domain.
	e.g, Add an item to an order, pay a bill, prepare a meal.	 
-> Events are another activity in the domain. They represent an action that happened in the past. Often broadcast to many destinations. Records a change
   to the state of a domain. Often the result of a command. e.g: An item was added to an order, A bill was paid, a meal was prepared.
   Events and commands often exist in a 1 to 1 relationship with the Command. Because they record something that happened in the past, 
   they are best written as past tense. Like Commands, Events are best when they reveal intent.

Like Commands, Events are best when they reveal intent
-> Queries are the final type of activity in the domain. They represent a request for information about the state of the domain. Because they are query,
	a response is always expected. Queries should the alter the state of the domain. Usually delivered to a specific destination.
	e.g, Get the details of an order, check if a bill has been paid.
-> Commands, Events and Queries are the messages in the reactive systems (Issued in Asynchrounous Message Driven Approach). 
	e.g(Make a Reservation, Reservation made, Get Reservation). They form the API for a Bounded Context or Microservice.	

==Ubiquitous Language to code==
-> Open an Order in domain (OpenOrder, class in code). Here, the Command is "Open an Order". This is using domain terminology
   and we could talk to our domain experts about how we "Open an Order" and they would be able to grasp what we are talking about.
    When we translate that into code we use a class name such as "OpenOrder" or even "OpenAnOrder". 
	This allows us to maintain the Ubiquitous Language in the code.

==Domain Objects==
-> Value object: It is defined by its attribute. Two value objects are equivalent, if their attributes are the same.
	e.g Address(street, city, state attributes), Name etc
-> Value objects are immutable, In addition to state, value objects can contain business logic.
-> Messages in Reactive Systems are implemented as Value Object, Discount(reason, price) on order

==Entity==
-> An entity is defined by a unique identity (i.e and id or key). An entity may changes attributes, but not its identity.
   e.g: Person entity, name must be unique, but other attributes (hair color, weight etc) may change, but it will be same entity.
   Entites are single source of truth for a particular id.
   If the identity changes, it is a new entity, regardless of its attributes. Entities may also contain business logic.
   e.g Actors in akka (unique address is identity, mutable: change their state in safe way),Entities in Lagom, Order(orderId(unique), name, table)
 
 ==Aggregate===
 -> It is a specific type of entity. An aggregate is a collection of domain objects bound to a root entity.
	e.g Person (root entity), domain objects (Name, Addres, PhoneNumber). The root entity is called the Aggregate Root.
	Objects in Aggregate can be treated as single Unit.Access to object in Aggregate must go through the Aggregate Root.
	Transaction should not span multiple Aggregate Roots.
	Some contexts may require multiple aggreate roots.
	Aggregates are good candidates for distribution in a reactive system.
-> How to detemine aggregate roots e.g Customer, Reservation etc
   Is the entity involved in most operations in that bounded context?
   If u delete the entity, does it require u to delete other entities?
   will a single transaction span multiple entities? 	
   
== Data Abstractions===
-> Business logic doesn't always fit with an entity or value object.
	Often used to abstract way an anti -corruption layer.
-> This logic can be encapsulated by a Service. Services should be stateless. Email Sender (Abstract), SMTP email sender (concrete)
-> Too many services lead to an anaemic domain. Look for missing domain object before resorting to a service.
-> Factories abstract away the logic of creation.
-> Factories are used to get new objects, Repositories are used to get, or modify existing objects
-> Factories and repositories are related.
-> Tools like Akka, lagom are powerful because they provide facilities that abstract away the need for Repositories.

==Hexagonal Architecutre or(Ports and Adapters)===
--> It is combined with DDD. It is not directly related to DDD. we can use DDD without using it. However, its very compatible with DDD.
--> Basically, its an alternative to the layered or N-tier architecture.
--> Domain is isolated to the center (core of hexagon) of the model, becomes the archtectureal focus. (has also user/Infrastructure side api, Data/Infrastructure side api)
--> Ports are exposed as an API by the domain, Infrastructure contains adapters that map to the ports.
--> API provides an interface to the Domain. These are your ports.
--> Infrastructure adapts incomming and outgoing traffic into the ports. 
--> Outer Layer depend on Inner layers. Inner layers have no knowledge of outer layer.
--> Advantage: allows our Domain to be portable, ensure proper separation of infrastrucutre from Domain. Prevents concerns about db, UI etc from
	bleeding into the domain.
--> This can be enforced with package, or even project structure in the application.
-> Akka, lagom take this further and abstract many of our infrastructure needs. Persistence, distribution, communication are all built into
	the tookits so you can foucs on the domain and worry less about infrastructure.
	